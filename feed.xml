<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joe Mercer</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Designer and Developer</description>
    <pubDate>Sun, 27 Apr 2014 16:00:00 +0000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Teams, not Groups</title>
      <link>http://localhost:8080/articles/teams-not-groups/</link>
      <pubDate>Sun, 27 Apr 2014 16:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/teams-not-groups/</guid>
      <author></author>
      <description>&lt;p&gt;In my first interview with &lt;a href=&quot;http://www.noom.com/&quot;&gt;Noom&lt;/a&gt; we discussed the implementation of a support group feature (a la Weight Watchers or Alcoholics Anonymous but online). The problem: how do we divide Noom’s user base into manageably sized groups of similarly minded people?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In my first interview with &lt;a href=&quot;http://www.noom.com/&quot;&gt;Noom&lt;/a&gt; we discussed the implementation of a support group feature (a la Weight Watchers or Alcoholics Anonymous but online). The problem: how do we divide Noom’s user base into manageably sized groups of similarly minded people? This isn’t a new problem, and the algorithm we created was essentially a &lt;a href=&quot;http://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;k-means clustering&lt;/a&gt; variant, a well-known algorithm used in data mining for spotting trends.&lt;/p&gt;
&lt;p&gt;First we vectorize the data; we think of each user as being a point in a multi-dimensional space of attributes, such as age, location, etc. For added flexibility we can even think of each user as being a weighted average of attribute vectors. This reflects the idea that some attributes are more influential in our definition of a user.&lt;/p&gt;
&lt;p&gt;The algorithm starts by arbitrarily choosing k “means”, or points in the vector space, and then alternates between two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Assign each data point to the mean that it’s closest to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calculate the new means by choosing the centroid (center) of each cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, in two dimensions (imagine a two dimensional scatter plot) this algorithm essentially draws circles around each mean such that every data point is contained within a circle, and then takes the center of each circle to be the next mean. As the algorithm runs through iterations, the circles move to fit more closely to the clusters in the data.&lt;/p&gt;
&lt;p&gt;For Groups at Noom, this algorithm works great because support groups work best with similar types of people - people that can relate and empathize easily with one another. But when you’re choosing a team you don’t want similar types of people. In fact, in many ways you want very different types of people - for example one player that’s a good rebounder and another that’s a good passer.&lt;/p&gt;
&lt;p&gt;At the University of Waterloo, the engineers have a fourth year class slot dedicated for a design project. This year a group of Management Engineers built an optimization model for &lt;a href=&quot;https://uwaterloo.ca/management-sciences/sites/ca.management-sciences/files/uploads/files/group_03_-_daniel_kocubej_srabotnjak_-_mar_20_2014_1238_pm_-_smart_match_poster_v1.1.pdf&quot;&gt;dividing people onto teams&lt;/a&gt; so as to balance skill sets while maximizing for optimal personality conditions.&lt;/p&gt;
&lt;p&gt;First, each person in the pool has to take a personality quiz and a skills assessment. The personality quiz evaluates each person in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_Five_personality_traits&quot;&gt;big five personality traits&lt;/a&gt;: openness, conscientiousness, extraversion, agreeableness, and neuroticism. These are well-known to Organizational Psychologists and it is generally accepted that teams function best with less diversity in conscientiousness and agreeableness, but more diversity in extraversion (openness and neuroticism are regarded as not influential factors in team success). The skills assessment is domain specific for the types of teams that are being created, and can be computed in many different ways. In the simplest model, the skills assessment simply asks candidates to rank themselves in a list of skills.&lt;/p&gt;
&lt;p&gt;The optimization algorithm then runs by checking every possible combination of team assignments against a set of constraints, scoring it against an objective function, and returning the team assignment that passes all the constraints with the optimum score. The flexibility in an optimization model comes from being able add constraints and alter the objective function. For example, a constraint can be added that requires each team to have at least a minimum threshold of each skill set.&lt;/p&gt;
&lt;p&gt;Can an algorithm create a team better than a manager can? It seems unlikely. Only a human can judge the indefinable qualities that make for strong relationships and cohesive teams. Sure, an algorithm might provide some interesting insights that a human could use as part of the decision making process, and I think this would be a useful application to think about, but I’m going to start in a different direction.&lt;/p&gt;
&lt;p&gt;There are conditions where I think an algorithm can be better at choosing teams than a manager:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There are a lot of people, and a lot of teams&lt;/li&gt;
&lt;li&gt;The people are relatively unknown to one another&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first example I could think of was on campus housing at university. The second was the military. &lt;/p&gt;
&lt;p&gt;Often under conditions like these, teams get made with very little thought, or even completely randomly. This isn’t necessarily terrible - an algorithm can’t be much better at predicting future best friends than flipping a coin - but little wins add up over time. Even if we can only improve the chance of roommates getting along by 5%, over the course of a thousand room assignments we’ll make a major positive influence in 100 lives (or 150 if you go to UCLA! - jokes). And we’ve seen (Microsoft, Facebook) some of the things that can happen when roommates in college get along.&lt;/p&gt;
&lt;p&gt;The way I envision such a system is it takes a large number people, facilitates the collection of data, and uses this data to assign them to teams based on existing knowledge about observational psychology and domain specific knowledge about the tasks and goals of each team. The team breakdown, and summary can be nicely presented to a manager for a final look-over, along with a set of tools for manipulating the teams and seeing the changes in stats. If more finely grained personality information about the people can be collected than additional software could even predict potential relationships to watch out for, either positively or negatively (although we should not let information like this result in a self-fulfilling prophecy).&lt;/p&gt;
&lt;p&gt;The first problem to tackle in creating a system like this is the scale. The optimization model developed by students at the University of Waterloo takes upwards of three hours to run on a sample size of 30 into groups of 3. Running it on a sample size of a 1000, or 10000, wouldn’t be feasible. I’ll leave a discussion the ways we can use mathematics and heuristics to approximate optimization models for a later blog post.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>3A Interviews Retrospective</title>
      <link>http://localhost:8080/articles/interviewing-retrospective/</link>
      <pubDate>Sat, 08 Feb 2014 02:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/interviewing-retrospective/</guid>
      <author></author>
      <description>&lt;p&gt;This past two weeks I’ve had about dozen interviews for software engineering intern positions at various companies, and I’d like to discuss what I thought went well and what didn’t.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-i-did-well&quot;&gt;What I did well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;prepared for technical questions beforehand by reading &lt;a href=&quot;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X&quot;&gt;a book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;did some &lt;a href=&quot;https://github.com/joemercer/&quot;&gt;personal projects&lt;/a&gt; to provide talking points for character questions&lt;/li&gt;
&lt;li&gt;refreshed my memory on &lt;a href=&quot;https://github.com/joemercer/interview-a-la-JavaScript&quot;&gt;basic algorithms and data structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;discussed my strategy for tackling a problem before coding anything&lt;/li&gt;
&lt;li&gt;went through line by line and explained my code after finishing the program&lt;/li&gt;
&lt;li&gt;programmed in JavaScript, regardless of the job description&lt;/li&gt;
&lt;li&gt;planned some questions to ask at the end (team structure, common technologies, where would I fit in)&lt;/li&gt;
&lt;li&gt;always got the name of someone to contact for logistical (pay, housing, transportation) information&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-i-didn-t-do-well&quot;&gt;What I didn’t do well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fell victim to nerves on my first interview&lt;/li&gt;
&lt;li&gt;didn’t plan domain specific questions (to show insight into a specific company)&lt;/li&gt;
&lt;li&gt;didn’t review JavaScript specific questions (and got tripped up on a closures question as a result)&lt;/li&gt;
&lt;li&gt;didn’t get much opportunity to show my projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-i-should-differently-next-time&quot;&gt;What I should differently next time&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;do a mock interview with a friend to shake out the nerves&lt;/li&gt;
&lt;li&gt;review common themes in questions and attempt to continually push useful code snippets to Github&lt;/li&gt;
&lt;li&gt;come up with a more demo-able app for interviews&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Choosing a Team</title>
      <link>http://localhost:8080/articles/choosing-a-team/</link>
      <pubDate>Sat, 08 Feb 2014 01:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/choosing-a-team/</guid>
      <author></author>
      <description>&lt;p&gt;I think one of the most important and interesting parts of any project is the team that builds it. In most cases I would say that the team is even more impactful than the idea. So the question is, what should we be looking for in a team?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I don’t know if I can answer this question in general, but for me specifically, I want people who are (in order of importance):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mindful&lt;/strong&gt; - know their strengths and limits, and are confident in voicing them&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transparent&lt;/strong&gt; - nobody on the team should be hiding anything, or obfuscating their intentions - we don’t have time to decipher meanings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good at teaching (or talking) / Good at learning (or listening)&lt;/strong&gt; - undoubtably in the course of the hackathon we will have to share knowledge and it’s important that we can disperse this knowledge quickly and without causing conflict&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flexible&lt;/strong&gt; - when conflicts arise the team needs to be able to reach a compromise fast (part of this is being able to listen and understand others’ idea’s, and being able to take criticisms of your idea)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Energetic&lt;/strong&gt; - pretty obvious I think&lt;/p&gt;
&lt;p&gt;More specifically what skills does the team need (in order of importance)? This is obviously highly dependent on the product, and I generally focus on making web applications so I’ll answer the question for me specifically.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Me (full stack developer comfortable working at any level in the stack)&lt;/li&gt;
&lt;li&gt;Designer (Photoshop, CSS, jQuery, general style)&lt;/li&gt;
&lt;li&gt;Server / opsy developer (good at setting up and managing the infrastructure pieces: databases, hosting, etc)&lt;/li&gt;
&lt;li&gt;Business guy (good at talking, making presentations, writing, explaining, generally likeable, knows the channels of the internet (Reddit, Youtube, etc), marketing, has connections)&lt;/li&gt;
&lt;li&gt;Full stack / focus on testing (understands testing technologies, writing unit tests and integration tests)&lt;/li&gt;
&lt;li&gt;More developers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It should be noted though that there’s an ideal number of people to have (more isn’t necessarily better). My rule is that each person on the team should always have work that they can do. If you have someone on the team who doesn’t have anything to do then they are just slowing you down.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hackathon Game Plan</title>
      <link>http://localhost:8080/articles/hackathon-game-plan/</link>
      <pubDate>Fri, 07 Feb 2014 20:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/hackathon-game-plan/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve done a couple hackathons in my life, and I’m starting to settle into a routine. Here are my thoughts…&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I think hackathons are great for many reasons, not the least of which is the time constraint. Because hackathons have to be completed in a short amount of time, it’s important to have pre-existing structures in place in order to maximize efficiency. And these pre-existing structures should include, among other things, a game plan.&lt;/p&gt;
&lt;p&gt;An important part of having a game plan is having a team. A large part of the game plan is pre-deciding the responsibilities of each teammate, and assigning them in such a way as to cleanly seperate the functionality so that it can be developed in parallel. This also has the benefit of eliminating (or drastically shortening) the time spent at the beginning creating and divvying up tasks. A preset team with a game plan can get right to work without having to assess each team member’s skills and debate on who should do what.&lt;/p&gt;
&lt;p&gt;Another important part of a game plan is having an idea of what technologies you’re planning on using. This lets team members study up on technologies before starting, or even better build skeleton (or seed projects) to extend from for even faster development. It also prevents discussions about which technologies to use from wasting time at the beginning.&lt;/p&gt;
&lt;p&gt;Having said that having a team and an idea of the technologies you you plan on using is important, I feel like I should mention that many people go to hackathons with the goal of working with new people, or learning new technologies. I think these are perfectly viable goals, but my experience has taught me that neither of them mix well with getting a lot of cohesive work done. This introduces, however, the very important concept of goals.&lt;/p&gt;
&lt;h3 id=&quot;step-1-figure-out-what-your-goal-is&quot;&gt;Step 1: Figure Out What Your Goal Is&lt;/h3&gt;
&lt;p&gt;The first thing that you should do, before any of the more glamorous steps, is figure out what it is that you’re hoping to get out of this hackathon. Are you trying to win? Learn new technology or language? Get a job? Whatever it is, you should have a clear idea of what it is because this knowledge will be the primary driver throughout the experience.&lt;/p&gt;
&lt;h3 id=&quot;step-2-figure-out-your-team-team-goal&quot;&gt;Step 2: Figure Out Your Team / Team Goal&lt;/h3&gt;
&lt;p&gt;Assuming that you already have a team in mind, it’s important to make sure that the entire team is on the same page. If one teammate’s goal is to learn new technology and another teammate’s goal is to win, I can guarantee that after a night of no sleep conflict will start to emerge. That isn’t to say that teammates can’t have different goals, as long as everyone clearly understands and agrees with the team’s goal, and with each other’s goal. If your goal doesn’t mesh well with the rest of your team, then, as excited as you may be to work with these people, I would suggest that you find a different team that can support your goal’s better. The most important thing to remember in this step is to be honest with yourself and with your team.&lt;/p&gt;
&lt;h3 id=&quot;step-3-brainstorm-an-idea&quot;&gt;Step 3: Brainstorm an Idea&lt;/h3&gt;
&lt;p&gt;This idea should be heavily influenced by your team’s goal. If your team is trying to impress recruiters in order to get a job, then choose an idea that will play to your strengths, and perhaps that will include domain specific teasers to incite follow up conversation.&lt;/p&gt;
&lt;p&gt;As with the team goal, it’s very important that everybody has a consistent vision of what the idea is (at least for the scope of the hackathon). This consistency should notably trump finding a “good idea.” In other words, it’s much better to have a consistent idea than a good idea.&lt;/p&gt;
&lt;p&gt;When choosing an idea it’s also important to be mindful of your team’s potential. Choose an idea that you’ll be able demo in some meaningful way at the end of the hackathon.&lt;/p&gt;
&lt;h3 id=&quot;step-4-decide-on-the-technologies&quot;&gt;Step 4: Decide On The Technologies&lt;/h3&gt;
&lt;p&gt;Before the hackathon starts you should read up on them, and perhaps even wrap them together in skeleton app so that you don’t have to start your hackathon by setting up infrastructure. For example, if your idea includes Payments, figure out what Payments platform you’re going to use, set up an account, and handle all the logistical stuff before the hackathon starts. &lt;/p&gt;
&lt;h3 id=&quot;step-5-do-the-hackathon&quot;&gt;Step 5: Do the Hackathon&lt;/h3&gt;
&lt;p&gt;Everything up to this point should have been done sometime between a week and a day before the hackathon so that once you reach this point everything it ready for you to start building the product right away. The way you approach this is very dependent on your team, but I’ll discuss it in the context of my past experiences.&lt;/p&gt;
&lt;h4 id=&quot;step-5-1-view-flows-and-data-model&quot;&gt;Step 5.1: View Flows and Data Model&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It’s super important that these are very transparent to everybody on the team&lt;/li&gt;
&lt;li&gt;Nothing causes more mistakes than not being on the same page as everybody else when it comes to what everyone is building&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-2-mockups-routes-partials-and-a-database&quot;&gt;Step 5.2: Mockups, Routes (partials), and a Database&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Mockups will guide the modularity of future templates&lt;/li&gt;
&lt;li&gt;Routing will define the user flow and provide a blank slate for building views&lt;/li&gt;
&lt;li&gt;The database will define the data relationships &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-3-accounts-models-and-a-bootstrap-file-for-pre-loading-the-database-with-test-data&quot;&gt;Step 5.3: Accounts, Models and a Bootstrap file for pre-loading the database with test data&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It’s worth figuring out something simple like FB OAuth as a quick way for distinguishing the people using your app&lt;/li&gt;
&lt;li&gt;Don’t slack on the Bootstrap file; even good apps look awkward without any data in them&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-4-templates-and-event-handling&quot;&gt;Step 5.4: Templates and Event Handling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ideally make templates reuseable and modular so that they can easily be styled&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-5-figure-out-hosting&quot;&gt;Step 5.5: Figure out Hosting&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Super important, make sure that your app is live so that people can check it out&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-6-css-and-app-specific-hooks-payments-security-&quot;&gt;Step 5.6: CSS and app-specific hooks (Payments, Security)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Not super necessary, but makes a huge difference to the overall quality of the app&lt;/li&gt;
&lt;li&gt;This is basically the step that takes your app from being a couple pretty pictures and a proof of data flow to being a fully functioning application&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-7-css-polish-and-additional-features&quot;&gt;Step 5.7: CSS Polish and Additional Features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Optional step, definitely de-prioritize over testing&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-8-testing-and-demo-preperation&quot;&gt;Step 5.8: Testing and Demo Preperation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Save at least three hours for this&lt;/li&gt;
&lt;li&gt;Make sure that you have something demo-able&lt;/li&gt;
&lt;li&gt;Make sure that it won’t crack under pressure (lot’s of users, slow wifi)&lt;/li&gt;
&lt;li&gt;Prepare and practice your demo beforehand; make sure it fits in the time limit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;step-5-9-relax-and-hype-it-to-the-crowd&quot;&gt;Step 5.9: Relax and hype it to the crowd&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This will help prepare you for your demo by testing your app’s ability to handle unexpected user behavior, and by forcing you to explain your idea many times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You keep in mind a couple other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sleeping is much better than getting nothing done because you’re tired&lt;/li&gt;
&lt;li&gt;Eating junk food and drinking energy drinks is like gambling with your energy levels and should be done mindfully&lt;/li&gt;
&lt;li&gt;Take breaks to clear your head (go for a walk, play ping pong, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;step-6-celebrate-and-unwind&quot;&gt;Step 6: Celebrate and Unwind&lt;/h3&gt;
&lt;p&gt;After the hackathon is over (especially if you win) you might be filled with an energy and feel inspired to start making plans for future projects or hackathons. Don’t. Everybody is tired, nobody is thinking clearly, and there is high likelihood that you’ll say something you don’t mean which create conflicts later. Celebrate in the abstract; talk about the cool ideas that other people pitched, or the neat features that you implemented. Congratulate everybody. Save the truly critical reflection for a later day.&lt;/p&gt;
&lt;h3 id=&quot;step-7-retrospective&quot;&gt;Step 7: Retrospective&lt;/h3&gt;
&lt;p&gt;Get the team back together and reflect on the experience. What worked well? What didn’t work well? How can things be improved next time? I think this step is super important because it will prevent you from making the same mistakes twice. Furthermore it can be enlightening to hear the perspectives of your teammates.&lt;/p&gt;
&lt;p&gt;The end. Go back to regular life.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hacking the Twitter API</title>
      <link>http://localhost:8080/articles/hacking-twitter-for-personal-analytics/</link>
      <pubDate>Sat, 18 Jan 2014 19:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/hacking-twitter-for-personal-analytics/</guid>
      <author></author>
      <description>&lt;p&gt;For the past while I’ve been playing around with an idea for a personal analytics system built on Twitter. Such a system could be used to log events in your life for programmatic access later.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It seemed a little funny to build a personal logging platform on Twitter, a service for public conversations, but it had a certain elegance that kept nagging at the back of my mind. Conceptually I think Twitter is more than just a massive global conversation. It’s a hundred million intimate timelines, documenting unique, independent lives. Currently all of this data exists, but it isn’t being framed in a useful way. It’s not “query-able”.&lt;/p&gt;
&lt;p&gt;Today I started working on an application to capture this data. In the abstract, it ties together multiple event streams and aggregates the logs in a queryable data structure. It’s kind of like &lt;a href=&quot;http://storm-project.net/&quot;&gt;Twitter Storm&lt;/a&gt; as a service.&lt;/p&gt;
&lt;p&gt;In practice however we have had to introduce some limitations in order to make this idea feasible. We’re limiting the source to just Twitter, and logs to just a couple different types. Also due to scalability and us not wanting to spend money, we’ll probably end up limiting the users to like 5, or 10. We’ll see.&lt;/p&gt;
&lt;p&gt;We built the service on &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; using &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;Mongo&lt;/a&gt; as the database. We hosted it all on &lt;a href=&quot;https://dashboard.heroku.com/&quot;&gt;Heroku&lt;/a&gt; using &lt;a href=&quot;http://www.mongohq.com/home&quot;&gt;MongoHQ&lt;/a&gt;. We’re also making heavy use of the &lt;a href=&quot;https://dev.twitter.com/docs/streaming-apis&quot;&gt;Twitter (streaming) API&lt;/a&gt; and &lt;a href=&quot;https://dev.twitter.com/docs/auth/oauth&quot;&gt;OAuth&lt;/a&gt;. We don’t have a front-end (i.e. it’s vanilla and just used for development). One of the benefits of using the Express + Mongo + Heroku stack is that everything is super well documented so getting up and running didn’t take much time at all. And of course everything so far has been free. &lt;/p&gt;
&lt;p&gt;At this point we have the basic infrastructure pieces in place, but we need to smooth out the edges before implementing any business logic. Hopefully we’ll have something working end to end in the next couple days.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Remaking iClicker with Meteor</title>
      <link>http://localhost:8080/articles/remaking-iclicker-with-meteor/</link>
      <pubDate>Sun, 12 Jan 2014 02:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/remaking-iclicker-with-meteor/</guid>
      <author></author>
      <description>&lt;p&gt;For the 11th UWaterloo Software Engineering hack day I decided to work with my friend Nicole to make a multi-platform responsive web app that could replace the pesky iClickers that first year students are required to waste $40 on.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I always find programming easier in the abstract however so we ended up building more of a multi-platform, responsive, reactive, realtime virtual classroom. There are many potential features. For example, the stoplight idea, where students can be in one of three states, green, yellow, and red, to indicate whether the prof should continue, slow down, or stop. Another feature would be allowing profs to ask questions to their students and then collect those answers back in realtime and display them on charts. Another feature would be to enable students to post comments and questions in a chatroom and then potentially answer one another’s questions without having to stop the flow of a lecture by asking a question.&lt;/p&gt;
&lt;p&gt;Since this was a Hackathon we only had a day to make this application, but we wanted to make it a full-fledged application (not just a series of screenshots and a flashy presentation). Nicole has experience with design and I have experience with full stack JavaScript architectures and between the two of us we have the skills to build a legitimate app in a day.&lt;/p&gt;
&lt;p&gt;To do this we decided to use Meteor js, which is a framework for building web apps super quickly. It comes with it’s downsides, one of which is being super opinionated and particular when it comes to doing front-end things (which can prevent you from being able to do them in the traditional style), but it also comes with many huge benefits. One of these benefits is to provide data connectivity throughout the entire stack, from database to client. Another is to provide an easy hosting solution. I could keep going on, but I won’t.&lt;/p&gt;
&lt;p&gt;We didn’t end up finishing our app, mainly due to problems with integrating design mock ups and Meteor functionality. We did finish a full set of design mock ups, and a fully working (but unstyled) Meteor application. Hopefully we can carve out some time in the future to bind them together.&lt;/p&gt;
&lt;p&gt;In the course of building this project I learned more about the Meteor Accounts system with the help of this &lt;a href=&quot;https://www.eventedmind.com/feed/97d0164c-8f71-46fe-819b-df8df3704546&quot;&gt;screencast&lt;/a&gt; and this &lt;a href=&quot;http://meteorhacks.com/extending-meteor-accounts.html&quot;&gt;tutorial&lt;/a&gt;. I also got more practice with structuring Meteor apps, especially from a server-side perspective.&lt;/p&gt;
&lt;p&gt;I’ll try to remember to update this with a link to the hosted website when it’s finished. For now, the code can be found on &lt;a href=&quot;https://github.com/joemercer/iclicker&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>This Site - Part 2</title>
      <link>http://localhost:8080/articles/this-site-part-2/</link>
      <pubDate>Thu, 09 Jan 2014 23:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/this-site-part-2/</guid>
      <author></author>
      <description>&lt;p&gt;This website uses &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;http://fontawesome.io/&quot;&gt;FontAwesome&lt;/a&gt;, and a library that I wrote called &lt;a href=&quot;http://joemercer.github.io/golden/&quot;&gt;Golden&lt;/a&gt;. Golden is a CSS library with a typography, gray scale, and grid system inspired by the &lt;a href=&quot;http://en.wikipedia.org/wiki/Golden_ratio&quot;&gt;Golden Ratio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The reason I chose to base the spacing and typography in my website off the Golden Ratio is somewhat arbitrary, but certainly no less arbitrary than the strategies of other designers. In terms of typography, the font-size, line-height, and line-width of paragraphs are all &lt;a href=&quot;http://www.pearsonified.com/2011/12/golden-ratio-typography.php&quot;&gt;based on the Golden Ratio&lt;/a&gt;. As you’re reading this you can be aware of the pleasing proportions of the text. You can also be aware of the pleasing proportions of the color, as the text color is related to both pure white and pure black by the Golden Ratio.&lt;/p&gt;
&lt;p&gt;Most of the common boilerplate CSS that goes into websites (&lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;Normalize&lt;/a&gt;, basic grid, etc), I’m pulling from Bootstrap. Instead of pulling Bootstrap from a CDN, as I did for FontAwesome, I did fork the project so that I could create a &lt;a href=&quot;http://coding.smashingmagazine.com/2013/03/12/customizing-bootstrap/&quot;&gt;custom version of Bootstrap&lt;/a&gt;. This has the downside of not hitting on a version that’s been cached prior in the user’s web page, but has the upside of letting me eliminate any unnecessary code. Currently I’m only using about 7 of the 40 or so Bootstrap modules, and the compiled and minified CSS is about 80% smaller. Another benefit is that as I have a need for additional Bootstrap modules I can import them later.&lt;/p&gt;
&lt;p&gt;To make my life easier I also incorporated &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; for concatenating and minifying my CSS. I haven’t yet found out a good way to have multiple deployment levels (dev, stage, prod, etc) and serve un-minified assets on dev while serving minified on stage and prod, but that’s on the to-do list and &lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-watch&quot;&gt;Grunt Watch&lt;/a&gt;/&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-less&quot;&gt;Grunt LESS&lt;/a&gt; are still useful in development to re-compile my code as I update it. &lt;/p&gt;
&lt;p&gt;I still need to include some new pages, like a resume, and add further styling for the article and archive pages. We’ll see what interesting thing pops up for Part-3.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>This Site - Part 1</title>
      <link>http://localhost:8080/articles/this-site-part-1/</link>
      <pubDate>Wed, 08 Jan 2014 09:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/this-site-part-1/</guid>
      <author></author>
      <description>&lt;p&gt;This website is created using a static site generator called &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;. For those in the know, Wintersmith is kind of like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; but built with JavaScript on Nodejs instead of with Ruby on Rails. As a full-stack JavaScript programmer myself, this seemed like the perfect solution.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So far, I’ve found that static site generators provide two useful functions:&lt;/p&gt;
&lt;p&gt;First, they provide a web server for hosting your website locally (which is helpful for development). As you might be able to expect, Wintersmith uses &lt;a href=&quot;http://nodejs.org/&quot;&gt;Nodejs&lt;/a&gt; as its local web server, and so far it’s worked perfectly out of the box. To get it started just run the &lt;code&gt;wintersmith preview&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Second, they include templating. By default, Wintersmith uses &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt; for templating and either &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; or &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON&lt;/a&gt; for content. Jade was new to me, and I’m not completely sold on it yet. Yes, Jade is much quicker than writing plain HTML (or a templating language like Handlebars that doesn’t abstract away the HTML), but when using extends and blocks it’s reliance on indentation can get confusing. To make debugging even more difficult, I’ve found that the documentation for Jade tends to lag behind its full feature set. Regardless, part of the reason I’m making this website is to experience new technologies so I’m going to stick with it for now. I’ve been using Markdown for a while now in the context of Github, and I am completely sold on using it more. Markdown is a text to HTML converter that stores it’s plain text in an easy to read format. Markdown works great for content sections, like this article, but when you need access to content in a more data-y fashion, Wintersmith also supports using JSON.&lt;/p&gt;
&lt;p&gt;After choosing Wintersmith as my framework, my second step was to push what little I had of my website live. As I was researching different hosting solutions my main goals were to find something cheap and quick. After shopping around I decided to host the website on &lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;, and use &lt;a href=&quot;http://wercker.com/&quot;&gt;Wercker&lt;/a&gt; as the delivery platform following &lt;a href=&quot;http://luke.vivier.ca/wintersmith-with-wercker/&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using Github Pages to host my website is nice because I’m already using Github to host the code. Everything can be found in one compact area. The only hiccup came along when I decided to create a Github personal page instead of project page. I did this because the personal pages make to username.github.io instead of username.github.io/project, and I like conserving space. Other than the url, the only difference between a personal page and a product page is that a personal page is build out of the master branch whereas a project page is built out of the gh-pages branch. As a result I’ve created a stage branch that would serve the normal purpose of the master branch.&lt;/p&gt;
&lt;p&gt;Wercker is an awesome tool that lets you define build and deployment steps that run off in the cloud. Right now I’m just using it to run the &lt;code&gt;wintersmith build&lt;/code&gt; command, and then push the built assets to the master branch, but eventually I’ll add in asset minification and other goodies.&lt;/p&gt;
&lt;p&gt;The brilliant part of everything is that my workflow is dead simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Branch off of stage&lt;/li&gt;
&lt;li&gt;Work&lt;/li&gt;
&lt;li&gt;Merge feature branch into stage&lt;/li&gt;
&lt;li&gt;Done - Wercker handles building the website and pushing it to the correct location so at this point I can see my changes live on my website&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After pushing everything live, my third step was writing this blog article : )&lt;/p&gt;
&lt;p&gt;Next I need to incorporate some additional pages, including a resume, and begin custom styling. I’ll write about this experience in Part 2 of this series. &lt;/p&gt;
</description>
    </item>
  </channel>
</rss>